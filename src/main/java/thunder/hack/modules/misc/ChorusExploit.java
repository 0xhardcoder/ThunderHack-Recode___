package thunder.hack.modules.misc;

import com.google.common.eventbus.Subscribe;
import thunder.hack.events.impl.EventSync;
import thunder.hack.events.impl.PacketEvent;
import thunder.hack.events.impl.Render3DEvent;
import thunder.hack.modules.Module;
import thunder.hack.setting.Setting;
import thunder.hack.setting.impl.ColorSetting;
import thunder.hack.utility.render.Render3DEngine;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
import net.minecraft.util.math.Box;
import net.minecraft.util.math.Vec3d;

import java.awt.*;

public class ChorusExploit extends Module {
    public ChorusExploit() {
        super("ChorusExploit", Category.MISC);
    }


    public final Setting<ColorSetting> color = new Setting<>("Color", new ColorSetting(new Color(0xFFFFFF)));

    Vec3d choruspos = null;
    PlayerPositionLookS2CPacket chorusPacket = null;
    boolean isEatingChorus = false;
    int chorusTicks = 0;

    @Override
    public void onDisable() {
        if(chorusPacket != null) {
            chorusPacket.apply(mc.player.networkHandler);
            reset();
        }
    }

    private void reset() {
        chorusPacket = null;
        choruspos = null;
    }
    

    @Subscribe
    public void onRenderLast(Render3DEvent e) {
        if(choruspos != null) {
            Box aabb = new Box(choruspos.add(-0.27, 0, -0.27), choruspos.add(0.27, 1.8, 0.27));
            Render3DEngine.drawBoxOutline(aabb,color.getValue().getColorObject(),2);
        }
    }

    @Subscribe
    public void onUpdate(EventSync e) {
        if(mc.player.getActiveItem() == null) return;
        if(mc.player.getActiveItem().getItem() == Items.CHORUS_FRUIT) {
            isEatingChorus = true;
        } else if(isEatingChorus){
            chorusTicks++;
            if(chorusTicks > 5) {
                isEatingChorus = false;
                chorusTicks = 0;
            }
        }
        if(mc.options.sneakKey.isPressed()) {
            if(chorusPacket != null) {
                chorusPacket.apply(mc.getNetworkHandler());
                reset();
            }
        }
    }

    @Subscribe
    public void onPacketReceive(PacketEvent.Receive e) {
        if(e.getPacket() instanceof PlayerPositionLookS2CPacket) {
            if(isEatingChorus || choruspos != null) {
                chorusPacket = e.getPacket();
                choruspos = new Vec3d(chorusPacket.getX(), chorusPacket.getY(), chorusPacket.getZ());
                e.cancel();
            }
        }
    }

    @Subscribe
    public void onPacketOut(PacketEvent.Send e) {
        if(chorusPacket != null && e.getPacket() instanceof PlayerMoveC2SPacket) {
            e.cancel();
        }
        if(chorusPacket != null && e.getPacket() instanceof PlayerMoveC2SPacket.Full) {
            e.cancel();
        }
        if(chorusPacket != null && e.getPacket() instanceof PlayerMoveC2SPacket.LookAndOnGround) {
            e.cancel();
        }
        if(chorusPacket != null && e.getPacket() instanceof PlayerMoveC2SPacket.OnGroundOnly) {
            e.cancel();
        }
        if(chorusPacket != null && e.getPacket() instanceof PlayerMoveC2SPacket.PositionAndOnGround) {
            e.cancel();
        }
    }
}
